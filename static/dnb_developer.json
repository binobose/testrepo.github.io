{
  "swagger" : "2.0",
  "info" : {
    "description" : "**IMPORTANT:** This API specification is a work in progress, so until there is an official release, please bear in mind that this spec might change. Having said that, the DNB Developer team would love to hear your thoughts on the current specification. After all, that is why we are publishing it! So feel free to contact us at developer@dnb.no. \n\n**Sandbox only:** \nNo APIs are currently publicly available in production - so all data returned from these endpoints are from a static sandbox environment containing *dummy data* only. We trying our best to get a dynamic sandbox and (of course) access to production available to you, but untill then, enjoy the feeling of being able to initiate infinite payments without influencing your account balance.. \n\n**General guidelines:**\n* We use camelCase, starting with lowercase: ```customerEngagement```, ```accountNumber```, ```creditCard```, etc.\n* Standards are mentioned and refered to, unless implicit by Swagger, \n* General rule: The response (object) determines endpoint: If the response is ```account```, the endpoint should be under ```/accounts```. In cases where this may be up for discussion, multiple endpoints may, for a limited time, be available in order to evaluate.\n* Versioning: Major.Minor.Patch (https://semver.org/). Major: Incompatible changes. Minor: New, backwards-compatible functionality. Patch: Backwards-compatible fixes. \n\n**HTTP Response Codes:**\n\nHTTP response are intended to be logical: If a ```customer```or an ```account``` does not exist, the response is ```404 Not Found```.  All errors return a relevant HTTP status code and response with an ``error`` containing additional details. The HTTP statuses returned are:\n\nSuccess\n\n* ```200: OK``` Success!   \n* ```201: Created``` Resource created. Reference included.\n* ```204: No Content``` Success - but no content returned   \n\nClient Error\n\n* ```400: Bad Request``` Your request was, somehow, not ok.  \n* ```401: Unauthorized``` You are unknown.   \n* ```403: Forbidden``` We know who you are, but you are attempting something you are not allowed to.  \n* ```404: Not Found``` What you looked for is not here.  \n* ```429: Too Many Requests``` Settle down!\n\nServer Error\n\n* ```500: Server Error``` We screwed up, sorry!\n* ```501: Not Implemented``` The operation is not (yet) implemented. \n* ```503: Service Unavailable``` Something is very wrong.\n* ```504: Timeout``` We need to speed up internally!\n\n**Github**\n\nBoth our swagger documentation and the test data is available on Github: https://github.com/DNBbank/\n\n**Contact DNB Open Banking**\n\nYou reach the entire team at developer@dnb.no. We do our best to reply as quickly as possible, and would love to hear from you!\n\n\n",
    "version" : "0.10.45",
    "title" : "DNB Developer APIs",
    "termsOfService" : "https://developer.dnb.no/#/termsofuse?pg=l",
    "contact" : {
      "name" : "DNB Open Banking",
      "url" : "https://developer.dnb.no",
      "email" : "developer@dnb.no"
    }
  },
  "host" : "developer-api-sandbox.dnb.no",
  "schemes" : [ "https" ],
  "consumes" : [ "application/json" ],
  "produces" : [ "application/json" ],
  "paths" : {
    "/testCustomers" : {
      "get" : {
        "tags" : [ "Test_Customers", "Draft" ],
        "summary" : "Test Customers",
        "description" : "**Note:** Currently not a functioning endpoint.\n\nThe are ten test customers are available in our Sandbox, with the following SSNs:\n\n|  | SSN | Customer Name |\n| -------- | -------- | -------- |\n| 1. | 29105573083          | Liv Ødegård     |\n| 2. | 18052903871          | Astrid Ruud     |\n| 3. | 08096203957          | Thor Knudsen     |\n| 4. | 15025498515          | Øyvind Hansen     |\n| 5. | 15047232429          | Siri Strand     |\n| 6. | 01103068170          | John Aune     |\n| 7. | 22121810569          | Sverre Jørgensen    |\n| 8. | 15099564713          | Karl Myhre     |\n| 9. | 12034802382          | Dag Andreassen     |\n| 10. | 10016956239         | Camilla Andresen    |\n\nThey have accounts, balances and due payments, so all they're looking for now is for someone play around with their data.\n\nTheir SSN's can be used when calling `Get API token`, to get a token in return associated with that customer only. Using this token when calling another APIs will return data associated only with that given test customer.\n\n**Note**: These customers along with all their associated data are *entirely fictional*, generated from test scripts residing at https://github.com/DNBbank/dnbtestdata. If you'd like to improve the scripts, little makes us more happy than a pull request! \n\n",
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Status 200",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/testCustomers"
              }
            }
          }
        }
      }
    },
    "/api/token" : {
      "get" : {
        "tags" : [ "API", "Draft" ],
        "summary" : "Get API token",
        "description" : "An API returning a token representing the end-consumer of the API.\n\nFor the sandbox, you need this token for calling the Customer, Accounts, Transactions and Payments APIs.\n\n**Note**: This will be replaced by another security mechanism in a future release.",
        "operationId" : "getApiToken",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "customerId",
          "in" : "query",
          "required" : true,
          "type" : "string",
          "description" : "One or more SSNs of the customer to obtain token(s) for. Multiple SSNs to be specified as comma separated list without whitespace.",
          "x-example" : "{\"type\":\"SSN\", \"value\":\"29105573083\"}"
        }, {
          "name" : "x-api-key",
          "in" : "header",
          "required" : true,
          "type" : "string",
          "description" : "App key from DNB Developer"
        } ],
        "responses" : {
          "200" : {
            "description" : "Status 200",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/tokenInfo"
              }
            }
          },
          "400" : {
            "description" : "Status 400",
            "schema" : {
              "$ref" : "#/definitions/error"
            }
          },
          "404" : {
            "description" : "Status 404"
          }
        }
      }
    },
    "/customers/current" : {
      "get" : {
        "tags" : [ "Customers", "Sandbox" ],
        "summary" : "Get details for current customer",
        "description" : "Retrieves basic information about the current ```customer```. ",
        "operationId" : "getCustomerCurrent",
        "parameters" : [ {
          "name" : "x-dnbapi-jwt",
          "in" : "header",
          "required" : true,
          "type" : "string",
          "description" : "Your JWT Token generated from Get API Token"
        }, {
          "name" : "x-api-key",
          "in" : "header",
          "required" : true,
          "type" : "string",
          "description" : "The API key from your app page in DNB Developer"
        } ],
        "responses" : {
          "200" : {
            "description" : "Customer found",
            "schema" : {
              "$ref" : "#/definitions/customer"
            },
            "headers" : {
              "X-DNBAPI-JWT" : {
                "type" : "string"
              },
              "X-DNBAPI-Channel" : {
                "type" : "string"
              },
              "X-DNBAPI-Trace-Id" : {
                "type" : "string"
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/error"
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/error"
            }
          },
          "404" : {
            "description" : "Not Found",
            "schema" : {
              "$ref" : "#/definitions/error"
            }
          }
        }
      }
    },
    "/accounts/{accountNumber}/balance" : {
      "get" : {
        "tags" : [ "Accounts", "Sandbox" ],
        "summary" : "Get account balance",
        "description" : "This API returns the balance of an account.",
        "operationId" : "getAccountBalance",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "x-dnbapi-jwt",
          "in" : "header",
          "required" : true,
          "type" : "string",
          "description" : "The JWT Token generated from Get API Token"
        }, {
          "name" : "x-api-key",
          "in" : "header",
          "required" : true,
          "type" : "string",
          "description" : "The API key from your app page in DNB Developer"
        } ],
        "responses" : {
          "200" : {
            "description" : "Request succeeded",
            "schema" : {
              "$ref" : "#/definitions/balance"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/error"
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/error"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/error"
            }
          },
          "404" : {
            "description" : "Not Found",
            "schema" : {
              "$ref" : "#/definitions/error"
            }
          }
        }
      },
      "parameters" : [ {
        "name" : "accountNumber",
        "in" : "path",
        "required" : true,
        "type" : "string",
        "minLength" : 11,
        "maxLength" : 11,
        "pattern" : "^\\d{11}$",
        "x-example" : "12345678901"
      } ]
    },
    "/accounts/{accountNumber}" : {
      "get" : {
        "tags" : [ "Accounts", "Sandbox" ],
        "summary" : "Get account details",
        "description" : "Returns the ```accountDetails``` of a given account. ",
        "operationId" : "getAccountDetails",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "Account Number",
          "in" : "query",
          "required" : false,
          "type" : "string",
          "description" : "The account number of the account you want to query. Must be a DNB account.",
          "minLength" : 11,
          "maxLength" : 11,
          "x-example" : "12001100000"
        }, {
          "name" : "x-dnbapi-jwt",
          "in" : "header",
          "required" : true,
          "type" : "string",
          "description" : "The JWT Token generated from Get API Token"
        }, {
          "name" : "x-api-key",
          "in" : "header",
          "required" : true,
          "type" : "string",
          "description" : "The API key from your app page in DNB Developer"
        } ],
        "responses" : {
          "200" : {
            "description" : "Request succeeded",
            "schema" : {
              "$ref" : "#/definitions/accountDetails"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/error"
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/error"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/error"
            }
          },
          "404" : {
            "description" : "accountNumber not found",
            "schema" : {
              "$ref" : "#/definitions/error"
            }
          }
        }
      },
      "parameters" : [ {
        "name" : "accountNumber",
        "in" : "path",
        "required" : true,
        "type" : "string",
        "minLength" : 11,
        "maxLength" : 11,
        "pattern" : "^\\d{11}$",
        "x-example" : "12345678901"
      } ]
    },
    "/accounts" : {
      "get" : {
        "tags" : [ "Accounts", "Sandbox" ],
        "summary" : "Get account list for current user",
        "description" : "Returns the list of DNB accounts for the current customer. \n\nThe customerId is included in the context object. ",
        "operationId" : "getAccountsForCurrentUser",
        "parameters" : [ {
          "name" : "x-dnbapi-jwt",
          "in" : "header",
          "required" : true,
          "type" : "string",
          "description" : "The JWT Token generated from Get API Token"
        }, {
          "name" : "x-api-key",
          "in" : "header",
          "required" : true,
          "type" : "string",
          "description" : "The API key from your app page in DNB Developer"
        } ],
        "responses" : {
          "200" : {
            "description" : "Status 200",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/account"
              }
            }
          },
          "400" : {
            "description" : "Status 400",
            "schema" : {
              "$ref" : "#/definitions/error"
            }
          },
          "404" : {
            "description" : "Status 404",
            "schema" : {
              "$ref" : "#/definitions/error"
            }
          }
        }
      }
    },
    "/transactions/{accountNumber}/" : {
      "get" : {
        "tags" : [ "Transactions", "Sandbox" ],
        "summary" : "Get transactions for account",
        "description" : "A transaction is a payment which already has been completed. This API allows you to retrieve the latest transactions on an account. \n\nOptional query parameters below. Note: We're working on adding more!\n* fromDate: \"YYYY-MM-DD\": ISO 8601: www.iso.org/iso/home/standards/iso8601.htm\n* toDate: \"YYYY-MM-DD\": ISO 8601: www.iso.org/iso/home/standards/iso8601.htm",
        "operationId" : "getAccountTransactions",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "dateFrom",
          "in" : "query",
          "required" : false,
          "type" : "string",
          "format" : "date",
          "description" : "Filter for start date (included)",
          "x-example" : "2018-01-01"
        }, {
          "name" : "dateTo",
          "in" : "query",
          "required" : false,
          "type" : "string",
          "format" : "date",
          "description" : "Filter for end date (included).",
          "x-example" : "2018-31-12"
        }, {
          "name" : "x-dnbapi-jwt",
          "in" : "header",
          "required" : true,
          "type" : "string",
          "description" : "The JWT Token generated from Get API Token"
        }, {
          "name" : "x-api-key",
          "in" : "header",
          "required" : true,
          "type" : "string",
          "description" : "The API key from your app page in DNB Developer"
        } ],
        "responses" : {
          "200" : {
            "description" : "Request succeeded",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/transaction"
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/error"
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/error"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/error"
            }
          },
          "404" : {
            "description" : "Not Found",
            "schema" : {
              "$ref" : "#/definitions/error"
            }
          }
        }
      },
      "parameters" : [ {
        "name" : "accountNumber",
        "in" : "path",
        "required" : true,
        "type" : "string",
        "minLength" : 11,
        "maxLength" : 11,
        "pattern" : "^\\d{11}$",
        "x-example" : "12345678901"
      } ]
    },
    "/payments/{paymentId}" : {
      "delete" : {
        "tags" : [ "Payments", "Sandbox" ],
        "summary" : "Delete payment by id",
        "description" : "Delete a due payment for an DNB account. To list the due payments, head over to *Get due payments*.\n\n**Note:** As our sandbox is currently static, deleting payments will not update the list of due payments in the Sandbox. The reason we are still making the APIs available is to allow for testing of responses and such while readying the dynamic sandbox for you. ",
        "operationId" : "deletePayment",
        "parameters" : [ {
          "name" : "x-dnbapi-jwt",
          "in" : "header",
          "required" : true,
          "type" : "string",
          "description" : "The JWT Token generated from Get API Token"
        }, {
          "name" : "x-api-key",
          "in" : "header",
          "required" : true,
          "type" : "string",
          "description" : "e API key from your app page in DNB Developer"
        } ],
        "responses" : {
          "204" : {
            "description" : "Gone forever! No further information needed or provided.",
            "schema" : {
              "$ref" : "#/definitions/error"
            }
          },
          "400" : {
            "description" : "Status 400"
          },
          "401" : {
            "description" : "Status 401",
            "schema" : {
              "$ref" : "#/definitions/error"
            }
          },
          "403" : {
            "description" : "Status 403",
            "schema" : {
              "$ref" : "#/definitions/error"
            }
          },
          "404" : {
            "description" : "Unknown paymentId",
            "schema" : {
              "$ref" : "#/definitions/error"
            }
          }
        }
      },
      "patch" : {
        "tags" : [ "Payments", "Sandbox" ],
        "summary" : "Update existing payment",
        "description" : "Update a due payment on an accont. A due ```payment``` can be updated until its due date, by changing one of the following parameters:\n* Date \n* Amount\n* Status (deactivate, reactivate)\n\nReturns the updated ```payment```.\n\n*Note: As our sandbox is currently static, deleting payments will not update the list of due payments in the Sandbox. The reason we are still making the APIs available is to allow for testing of responses and such while readying the dynamic sandbox for you.*",
        "operationId" : "updatePayment",
        "consumes" : [ ],
        "parameters" : [ {
          "name" : "x-dnbapi-jwt",
          "in" : "header",
          "required" : true,
          "type" : "string",
          "description" : "The JWT Token generated from Get API Token"
        }, {
          "name" : "x-api-key",
          "in" : "header",
          "required" : true,
          "type" : "string",
          "description" : "The API key from your app page in DNB Developer"
        }, {
          "name" : "body",
          "in" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/paymentInitiation"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Payment updated. (Note: This was previously ```HTTP 201 Created```, but since the payment was already created before this request, it is now ```HTTP 200 OK```)",
            "schema" : {
              "$ref" : "#/definitions/payment"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/error"
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/error"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/error"
            }
          },
          "404" : {
            "description" : "Not Found",
            "schema" : {
              "$ref" : "#/definitions/error"
            }
          }
        }
      },
      "parameters" : [ {
        "name" : "paymentId",
        "in" : "path",
        "required" : true,
        "type" : "string"
      } ]
    },
    "/payments/{accountNumber}/due" : {
      "get" : {
        "tags" : [ "Payments", "Sandbox" ],
        "summary" : "Get due payments for an account",
        "description" : "A due payment is a `payment` that is scheduled to be deducted from an account. It can be changed untill its due date, by using update or delete payment\n\nThis API retrieves  all due ```payment```s from an account. You can specify the dates between which you want to retrieve due payments from.",
        "operationId" : "getPaymentsDue",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "startDate",
          "in" : "query",
          "required" : false,
          "type" : "string",
          "format" : "date",
          "description" : "Filter for start date (included).",
          "x-example" : "2018-01-01"
        }, {
          "name" : "stopDate",
          "in" : "query",
          "required" : false,
          "type" : "string",
          "format" : "date",
          "description" : "Filter for end date (included).",
          "x-example" : "2018-12-31"
        }, {
          "name" : "x-dnbapi-jwt",
          "in" : "header",
          "required" : true,
          "type" : "string",
          "description" : "The JWT Token generated from Get API Token"
        }, {
          "name" : "x-api-key",
          "in" : "header",
          "required" : true,
          "type" : "string",
          "description" : "The API key from your app page in DNB Developer"
        } ],
        "responses" : {
          "200" : {
            "description" : "Request succeeded",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/payment"
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/error"
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/error"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/error"
            }
          },
          "404" : {
            "description" : "Not Found",
            "schema" : {
              "$ref" : "#/definitions/error"
            }
          }
        }
      },
      "parameters" : [ {
        "name" : "accountNumber",
        "in" : "path",
        "required" : true,
        "type" : "string"
      } ]
    },
    "/payments/{accountNumber}/due/{paymentId}" : {
      "get" : {
        "tags" : [ "Payments", "Sandbox" ],
        "summary" : "Get due payment by payment id",
        "description" : "A due payment is a `payment` that is scheduled to be deducted from an account. It can be changed untill its due date, by using update or delete payment\n\nThis API retrieves the details of a specific `due payment`. complete with with ```paymentDetails```.",
        "operationId" : "getPaymentDueById",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "x-dnbapi-jwt",
          "in" : "header",
          "required" : true,
          "type" : "string",
          "description" : "The JWT Token generated from Get API Token"
        }, {
          "name" : "x-api-key",
          "in" : "header",
          "required" : true,
          "type" : "string",
          "description" : "The API key from your app page in DNB Developer"
        } ],
        "responses" : {
          "200" : {
            "description" : "Request succeeded",
            "schema" : {
              "$ref" : "#/definitions/payment"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/error"
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/error"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/error"
            }
          },
          "404" : {
            "description" : "Not Found",
            "schema" : {
              "$ref" : "#/definitions/error"
            }
          }
        }
      },
      "parameters" : [ {
        "name" : "accountNumber",
        "in" : "path",
        "required" : true,
        "type" : "string"
      }, {
        "name" : "paymentId",
        "in" : "path",
        "required" : true,
        "type" : "string"
      } ]
    },
    "/payments" : {
      "post" : {
        "tags" : [ "Payments", "Sandbox" ],
        "summary" : "Initiate payment",
        "description" : "Initiate a domestic payment going directly from a DNB account with KID or message. Also allows for transfers (payments between accounts held by the same owner). The recieving account can be in whichever bank, but for domestic payments it has to be a Norwegian one.\n\nAccepts a ```paymentInitiation``` POST, and returns HTTP 201 with the ```PaymentId``` of the successfully created ```payment```.\n\n*Note: As our sandbox is currently static, initiating payments unfortuntately won't reflect in neither the balance nor lastest transactions of the account. While we are working hard to get you a dynamic sandbox, you may in the meanwhile look at it as finally having that infinite account never getting affected by your purchases.*",
        "operationId" : "paymentInitiate",
        "consumes" : [ "application/json" ],
        "parameters" : [ {
          "name" : "x-dnbapi-jwt",
          "in" : "header",
          "required" : true,
          "type" : "string",
          "description" : "The JWT Token generated from Get API Token"
        }, {
          "name" : "x-api-key",
          "in" : "header",
          "required" : true,
          "type" : "string",
          "description" : "The API key from your app page in DNB Developer"
        }, {
          "name" : "body",
          "in" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/paymentInitiation"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Created",
            "schema" : {
              "type" : "object",
              "description" : "Returning id of the new payment",
              "properties" : {
                "paymentId" : {
                  "type" : "string",
                  "example" : "12345"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/error"
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/error"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/error"
            }
          }
        }
      }
    },
    "/cards/{cardId}/balance" : {
      "get" : {
        "tags" : [ "Cards", "Draft" ],
        "summary" : "Get card balance",
        "description" : "**Note:** This API endpoint is not yet available in our sandbox. We're working to get it out as soon as possible!\n\nReturns the balance of a card, if available.",
        "parameters" : [ {
          "name" : "x-dnbapi-jwt",
          "in" : "header",
          "required" : true,
          "type" : "string",
          "description" : "The JWT Token generated from Get API Token"
        }, {
          "name" : "x-api-key",
          "in" : "header",
          "required" : true,
          "type" : "string",
          "description" : "The API key from your app page in DNB Developer"
        } ],
        "responses" : {
          "200" : {
            "description" : "Status 200",
            "schema" : {
              "$ref" : "#/definitions/balance"
            }
          }
        }
      },
      "parameters" : [ {
        "name" : "cardId",
        "in" : "path",
        "required" : true,
        "type" : "string"
      } ]
    },
    "/cards/{cardId}/details" : {
      "get" : {
        "tags" : [ "Cards", "Draft" ],
        "summary" : "Get card details",
        "description" : "**Note:** This API endpoint is not yet available in our sandbox. We're working to get it out as soon as possible!\n\nIncludes balance and credit limit (when applicable).",
        "operationId" : "getCardDetailsById",
        "parameters" : [ {
          "name" : "x-dnbapi-jwt",
          "in" : "header",
          "required" : true,
          "type" : "string",
          "description" : "The JWT Token generated from Get API Token"
        }, {
          "name" : "x-api-key",
          "in" : "header",
          "required" : true,
          "type" : "string",
          "description" : "The API key from your app page in DNB Developer"
        } ],
        "responses" : {
          "200" : {
            "description" : "Request succeeded"
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/error"
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/error"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/error"
            }
          },
          "404" : {
            "description" : "Not Found",
            "schema" : {
              "$ref" : "#/definitions/error"
            }
          }
        }
      },
      "parameters" : [ {
        "name" : "cardId",
        "in" : "path",
        "required" : true,
        "type" : "string",
        "x-example" : "12345678901"
      } ]
    },
    "/cards/{cardId}/statement/{year}/{month}" : {
      "get" : {
        "tags" : [ "Cards", "Draft" ],
        "summary" : "Get card statement",
        "description" : "**Note:** This API endpoint is not yet available in our sandbox. We're working to get it out as soon as possible!\n\nReturns the card statement for a specified month.",
        "operationId" : "gertCardInvoice",
        "parameters" : [ {
          "name" : "x-dnbapi-jwt",
          "in" : "header",
          "required" : true,
          "type" : "string",
          "description" : "The JWT Token generated from Get API Token"
        }, {
          "name" : "x-api-key",
          "in" : "header",
          "required" : true,
          "type" : "string",
          "description" : "The API key from your app page in DNB Developer"
        } ],
        "responses" : {
          "200" : {
            "description" : "Request succeeded"
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/error"
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/error"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/error"
            }
          },
          "404" : {
            "description" : "Not Found",
            "schema" : {
              "$ref" : "#/definitions/error"
            }
          }
        }
      },
      "parameters" : [ {
        "name" : "cardId",
        "in" : "path",
        "required" : true,
        "type" : "string",
        "x-example" : "12345678901"
      }, {
        "name" : "year",
        "in" : "path",
        "required" : true,
        "type" : "string",
        "description" : "YYYY",
        "x-example" : "2018"
      }, {
        "name" : "month",
        "in" : "path",
        "required" : true,
        "type" : "string",
        "description" : "MM, where January is 01",
        "x-example" : "01"
      } ]
    },
    "/cards/{cardId}/block" : {
      "patch" : {
        "tags" : [ "Cards", "Draft" ],
        "summary" : "Block card",
        "description" : "**Note:** This API endpoint is not yet available in our sandbox. We're working to get it out as soon as possible!\n\nAbility for end-customet to block a debit or credit card (not including Cresco Cards).",
        "operationId" : "blockCard",
        "parameters" : [ {
          "name" : "x-dnbapi-jwt",
          "in" : "header",
          "required" : true,
          "type" : "string",
          "description" : "The JWT Token generated from Get API Token"
        }, {
          "name" : "x-api-key",
          "in" : "header",
          "required" : true,
          "type" : "string",
          "description" : "The API key from your app page in DNB Developer"
        } ],
        "responses" : {
          "200" : {
            "description" : "The card is now blocked",
            "schema" : {
              "type" : "array",
              "items" : {
                "type" : "string"
              }
            },
            "examples" : {
              "application/json" : "ReasonCode"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/error"
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/error"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/error"
            }
          },
          "404" : {
            "description" : "Not Found",
            "schema" : {
              "$ref" : "#/definitions/error"
            }
          }
        }
      },
      "parameters" : [ {
        "name" : "cardId",
        "in" : "path",
        "required" : true,
        "type" : "string",
        "x-example" : "12345678901"
      } ]
    },
    "/cards/{cardId}/unblock" : {
      "patch" : {
        "tags" : [ "Cards", "Draft" ],
        "summary" : "Unblock card",
        "description" : "**Note:** This API endpoint is not yet available in our sandbox. We're working to get it out as soon as possible!\n\nUnblock a blocked ```card```.",
        "operationId" : "unblockCard",
        "parameters" : [ {
          "name" : "x-dnbapi-jwt",
          "in" : "header",
          "required" : true,
          "type" : "string",
          "description" : "The JWT Token generated from Get API Token"
        }, {
          "name" : "x-api-key",
          "in" : "header",
          "required" : true,
          "type" : "string",
          "description" : "The API key from your app page in DNB Developer"
        } ],
        "responses" : {
          "200" : {
            "description" : "Unblocked"
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/error"
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/error"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/error"
            }
          },
          "404" : {
            "description" : "Not Found",
            "schema" : {
              "$ref" : "#/definitions/error"
            }
          }
        }
      },
      "parameters" : [ {
        "name" : "cardId",
        "in" : "path",
        "required" : true,
        "type" : "string",
        "x-example" : "12345678901"
      } ]
    },
    "/currencies/{toCurrency}/convert/{fromCurrency}/{amount}" : {
      "parameters" : [ {
        "name" : "toCurrency",
        "in" : "path",
        "required" : true,
        "type" : "string",
        "description" : "ISO 4217: alpha 3-letter upcase e.g ```NOK```. This is the currency we are converting the amount _to_."
      }, {
        "name" : "fromCurrency",
        "in" : "path",
        "required" : true,
        "type" : "string",
        "description" : "ISO 4217: alpha 3-letter upcase e.g ```NOK```. This is the currency we are converting the amount _from_.",
        "x-example" : "GBP"
      }, {
        "name" : "amount",
        "in" : "path",
        "required" : true,
        "type" : "number",
        "description" : "Amount for the ```fromCurrency```.",
        "x-example" : 1234.56
      } ]
    },
    "/currencies/{toCurrency}" : {
      "get" : {
        "tags" : [ "Currencies", "Sandbox" ],
        "summary" : "Get currency rate list",
        "description" : "Returns a list of currency rates for the most common currencies, for the specified base currency. \n\n**NOTE**: The source data is based on NOK as the base currency. Any other base currency requires different source data, which is currently not available. ",
        "operationId" : "currencyList",
        "parameters" : [ {
          "name" : "date",
          "in" : "query",
          "required" : false,
          "type" : "string",
          "description" : "Not yet implemented.",
          "x-example" : "2018-12-31"
        }, {
          "name" : "x-api-key",
          "in" : "header",
          "required" : true,
          "type" : "string",
          "description" : "The API key from your app page in DNB Developer"
        } ],
        "responses" : {
          "200" : {
            "description" : "Request succeeded",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/currencyRate"
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/error"
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/error"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/error"
            }
          },
          "404" : {
            "description" : "Not Found",
            "schema" : {
              "$ref" : "#/definitions/error"
            }
          }
        }
      },
      "parameters" : [ {
        "name" : "toCurrency",
        "in" : "path",
        "required" : true,
        "type" : "string",
        "description" : "ISO 4217: alpha 3-letter upcase e.g ```NOK```. This is the currency we are converting the amount _to_. \n\nThe response will contain a list of currency rates for various currencies, converted to the ```toCurrency```. If ```toCurrency```is ```NOK```, the list will contain a list of ```currencyRate```s for ```EUR```, ```USD```, ```GBP```, etc converted into ```NOK```.",
        "default" : "NOK",
        "minLength" : 3,
        "maxLength" : 3,
        "x-example" : "NOK"
      } ]
    },
    "/currencies/{base}/convert/{quote}/amount/{amount}" : {
      "get" : {
        "tags" : [ "Currencies", "Sandbox" ],
        "summary" : "Currency conversion",
        "description" : "Convert amount from one currency to another - just like a currency calcuator. Note that this API is only available in Sandbox for now, meaning that the currencies returned are not updated.\n\n\n**NOTE**: The source data is based on NOK as the base currency. Because of this, one of the currencies (base or quote) _must be_ NOK. Conversion between any two currencies requires different source data, which is currently not available. ",
        "operationId" : "currencyConvert",
        "parameters" : [ {
          "name" : "x-api-key",
          "in" : "header",
          "required" : true,
          "type" : "string",
          "description" : "The API key from your app page in DNB Developer"
        } ],
        "responses" : {
          "200" : {
            "description" : "Request succeeded",
            "schema" : {
              "$ref" : "#/definitions/currencyRate"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/error"
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/error"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/error"
            }
          },
          "404" : {
            "description" : "Not Found",
            "schema" : {
              "$ref" : "#/definitions/error"
            }
          }
        }
      },
      "parameters" : [ {
        "name" : "base",
        "in" : "path",
        "required" : true,
        "type" : "string"
      }, {
        "name" : "quote",
        "in" : "path",
        "required" : true,
        "type" : "string"
      }, {
        "name" : "amount",
        "in" : "path",
        "required" : true,
        "type" : "string"
      } ]
    },
    "/locations/branches" : {
      "get" : {
        "tags" : [ "Location", "Sandbox" ],
        "summary" : "Get list of all DNB branches",
        "operationId" : "listBranches",
        "parameters" : [ {
          "name" : "x-api-key",
          "in" : "header",
          "required" : true,
          "type" : "string",
          "description" : "The API key from your app page in DNB Developer"
        } ],
        "responses" : {
          "200" : {
            "description" : "Request succeeded",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/branch"
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/error"
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/error"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/error"
            }
          },
          "404" : {
            "description" : "Not Found",
            "schema" : {
              "$ref" : "#/definitions/error"
            }
          }
        }
      }
    },
    "/locations/atms" : {
      "get" : {
        "tags" : [ "Location", "Sandbox" ],
        "summary" : "Get list of all DNB ATMs",
        "operationId" : "listAtms",
        "parameters" : [ {
          "name" : "x-api-key",
          "in" : "header",
          "required" : true,
          "type" : "string",
          "description" : "The API key from your app page in DNB Developer"
        } ],
        "responses" : {
          "200" : {
            "description" : "Request succeeded",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/atm"
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/error"
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/error"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/error"
            }
          },
          "404" : {
            "description" : "Not Found",
            "schema" : {
              "$ref" : "#/definitions/error"
            }
          }
        }
      }
    },
    "/locations/branches/coordinates" : {
      "get" : {
        "tags" : [ "Location", "Sandbox" ],
        "summary" : "Find nearest branch by coordinates",
        "description" : "**NOTE:** Currently uses _aerial distance_ only, not distance using roads, etc.\n\nReturns an array of ```branches```, as there may be more than one branch that is \"the nearest\".",
        "operationId" : "findBranchByCoordinates",
        "parameters" : [ {
          "name" : "latitude",
          "in" : "query",
          "required" : true,
          "type" : "number"
        }, {
          "name" : "longitude",
          "in" : "query",
          "required" : true,
          "type" : "number"
        }, {
          "name" : "x-api-key",
          "in" : "header",
          "required" : true,
          "type" : "string",
          "description" : "The API key from your app page in DNB Developer"
        } ],
        "responses" : {
          "200" : {
            "description" : "Request succeeded",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/branch"
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/error"
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/error"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/error"
            }
          },
          "404" : {
            "description" : "Not Found",
            "schema" : {
              "$ref" : "#/definitions/error"
            }
          }
        }
      }
    },
    "/locations/branch/findbyaddress" : { },
    "/locations/atms/coordinates" : {
      "get" : {
        "tags" : [ "Location", "Sandbox" ],
        "summary" : "Find nearest ATM by coordinates",
        "description" : "**NOTE:** Currently uses _aerial distance_ only, not distance using roads, etc.\n\nReturns an array of ```atm```, as there may be more than one ATM that is \"the nearest\".",
        "operationId" : "findAtmByCoordinates",
        "parameters" : [ {
          "name" : "latitude",
          "in" : "query",
          "required" : true,
          "type" : "number"
        }, {
          "name" : "longitude",
          "in" : "query",
          "required" : true,
          "type" : "number"
        }, {
          "name" : "x-api-key",
          "in" : "header",
          "required" : true,
          "type" : "string",
          "description" : "The API key from your app page in DNB Developer"
        } ],
        "responses" : {
          "200" : {
            "description" : "Request succeeded",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/atm"
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/error"
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/error"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/error"
            }
          },
          "404" : {
            "description" : "Not Found",
            "schema" : {
              "$ref" : "#/definitions/error"
            }
          }
        }
      }
    },
    "/locations/branches/{branchid}" : {
      "get" : {
        "tags" : [ "Location", "Sandbox" ],
        "summary" : "Get branch details",
        "description" : "Contact information, opening hours, etc for a specific branch. See ```/locations/branches``` for getting all ```branches``` and their ids.",
        "operationId" : "getBranchDetails",
        "parameters" : [ {
          "name" : "x-api-key",
          "in" : "header",
          "required" : true,
          "type" : "string",
          "description" : "The API key from your app page in DNB Developer"
        } ],
        "responses" : {
          "200" : {
            "description" : "Request succeeded",
            "schema" : {
              "$ref" : "#/definitions/branch"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/error"
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/error"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/error"
            }
          },
          "404" : {
            "description" : "Not Found",
            "schema" : {
              "$ref" : "#/definitions/error"
            }
          }
        }
      },
      "parameters" : [ {
        "name" : "branchid",
        "in" : "path",
        "required" : true,
        "type" : "string",
        "description" : "Id of branch",
        "x-example" : "12345"
      } ]
    },
    "/locations/branches/findbyaddress" : {
      "get" : {
        "tags" : [ "Location", "Sandbox" ],
        "summary" : "Find nearest branch by address",
        "description" : "**NOTE:** Not planned for the first phase. See ```/locations/branches``` and ```/locations/Atms```. Needs an ```address```(or smiliar data) as a ```POST``` request.\n\nReturns an array of ```branches```, as there may be more than one branch that is \"the nearest\".\n",
        "operationId" : "findBranchByAddress",
        "parameters" : [ {
          "name" : "address",
          "in" : "query",
          "required" : true,
          "type" : "string",
          "description" : "For now: Assume geocoding functionality similar to Google Maps: https://developers.google.com/maps/documentation/geocoding/intro"
        }, {
          "name" : "x-api-key",
          "in" : "header",
          "required" : true,
          "type" : "string",
          "description" : "The API key from your app page in DNB Developer"
        } ],
        "responses" : {
          "200" : {
            "description" : "Request succeeded",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/branch"
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/error"
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/error"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/error"
            }
          },
          "404" : {
            "description" : "Not Found",
            "schema" : {
              "$ref" : "#/definitions/error"
            }
          }
        }
      }
    }
  },
  "definitions" : {
    "error" : {
      "type" : "object",
      "properties" : {
        "errorDocumentation" : {
          "type" : "string",
          "description" : "URI to developer documentation for this error.",
          "example" : "https://developer.dnb.no/something-useful-goes-here/"
        },
        "errorDetails" : {
          "type" : "array",
          "description" : "Details about the cause of this error (or errors). May contain information about an invalid parameter, or another specific problem.",
          "items" : {
            "type" : "object",
            "properties" : {
              "errorNumber" : {
                "type" : "integer"
              },
              "errorField" : {
                "type" : "string",
                "description" : "Error cause. Not yet implemented.",
                "example" : "accountNumber"
              },
              "errorDetailsDescription" : {
                "type" : "string",
                "description" : "Error cause. Not yet implemented.",
                "example" : "accountNumber must be digits only"
              }
            }
          }
        }
      },
      "description" : "The HTTP status code (```httpStatus```) is the main classifier. A DNB-specific ```errorNumber```is also provided as a lookup reference. \n\nThe ```errorDocumentation``` is a URI to further information about the endpoint, with uesful infomration about correct usage.\n\nThe ```errorDetails```is specific information about the one or more errors that have occurred.\n\n**Note:** We strive to offer the best possible information about all errors. This depends on the information offered by the backend systems, and in some cases there is limited information available from the underlying solutions. In these cases, the errors may contain empty fields, and/or information that is difficult to interpret. In cases where the error information needs improvement, please let us know: developer@dnb.no. \n\nExample ```error``` (TODO: Work in progress: May need an update):\n```\n{\n  \"errorDocumentation\": \"https://developer.dnb.no/something-useful-goes-here/\",\n  \"errorDetails\": [\n    {\n      \"errorNumber\": \"123450\",\n      \"errorField\": \"accountNumber\",\n      \"errorDescription\": \"accountNumber must be digits only\"\n    },\n    {\n      \"errorNumber\": \"123451\",\n      \"errorField\": \"dateFrom\",\n      \"errorDescription\": \"dateFrom must be in ISO8601 date format\"\n    }\n  ]\n}\n```"
    },
    "headerLinks" : {
      "type" : "object",
      "required" : [ "first", "self" ],
      "properties" : {
        "first" : {
          "type" : "string",
          "example" : "https://api.example.com/something-first"
        },
        "self" : {
          "type" : "string",
          "example" : "https://api.example.com/something"
        },
        "previous" : {
          "type" : "string",
          "example" : "https://api.example.com/something-previous"
        },
        "next" : {
          "type" : "string",
          "example" : "https://api.example.com/something-next"
        }
      },
      "description" : "URIs for previous, this and next. Only ```self``` is required, as previous and next may not exist.\n\nSee also the pagination headers: ```pageNumber```and ```pageSize```."
    },
    "notImplemented" : {
      "type" : "object",
      "properties" : {
        "explanation" : {
          "type" : "string",
          "description" : "Text describing that this operation is not yet implemented.",
          "default" : "Feedback is very welcome: developer@dnb.no"
        },
        "error" : {
          "$ref" : "#/definitions/error"
        }
      },
      "description" : "A special ```error``` wrapper: Standard response for endpoints that are not yet implemented. Used for endpoints tagged with ```Draft```."
    },
    "transaction" : {
      "type" : "object",
      "required" : [ "amount", "dateBooking", "transactionId" ],
      "properties" : {
        "transactionId" : {
          "type" : "string",
          "example" : "12345"
        },
        "accountNumber" : {
          "type" : "string"
        },
        "transactionTimestamp" : {
          "type" : "string",
          "format" : "date-time"
        },
        "dateBooking" : {
          "type" : "string",
          "format" : "date",
          "example" : "2018-12-31"
        },
        "dateValue" : {
          "type" : "string",
          "format" : "date",
          "example" : "2018-12-31"
        },
        "dateReservation" : {
          "type" : "string",
          "format" : "date"
        },
        "originalCurrencyValue" : {
          "type" : "number",
          "description" : "Amount in foreign currency (if relevant)",
          "example" : 90
        },
        "originalCurrency" : {
          "type" : "string",
          "description" : "If not the currency of the account/card.",
          "default" : "NOK",
          "minLength" : 3,
          "maxLength" : 3,
          "pattern" : "`^[A-Z]{3}$",
          "example" : "NOK"
        },
        "amount" : {
          "type" : "number",
          "description" : "Amount in the account's currency",
          "minimum" : 0,
          "example" : 1500
        },
        "exchangeRate" : {
          "type" : "number"
        },
        "status" : {
          "type" : "string",
          "description" : "Booked, reserved, and, if this is to be merged with ```payment```: Completed (or something similar, to indicate that this has, in fact, been processed and finalized)",
          "default" : "BOOKED",
          "enum" : [ "BOOKED", "RESERVED" ],
          "example" : "BOOKED"
        },
        "description" : {
          "type" : "string",
          "description" : "Descriptive text for the transaction.",
          "example" : "Lunch at The Restaurant at the End of the Universe"
        },
        "merchantName" : {
          "type" : "string",
          "description" : "Name of merchant. With a merhant register, this could be replaced with a (for now, non-existant) ```merchantId```.",
          "example" : "Coffee Shop ChainName, shop number 10"
        },
        "externalReference" : {
          "type" : "string"
        },
        "message" : {
          "type" : "string",
          "description" : "Merge with ```kid```? See also ```paymentInitiation```and ```payment```."
        },
        "kid" : {
          "type" : "string",
          "description" : "Merge with ```message```? Merge with ```kid```? See also ```paymentInitiation```and ```payment```."
        },
        "paymentId" : {
          "type" : "string"
        },
        "reservationId" : {
          "type" : "string"
        },
        "cardId" : {
          "type" : "string"
        },
        "details" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "metadata" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        }
      },
      "description" : "A ```transaction``` is a completed operation, in contrast to ```payment```, which is planned, but not completed.\n\nThe same ```transaction``` is used for all types of transactions: DNB-only account transactions, domestic transactions, international transactions, card transactions, etc. Some transaction types have more fields and data than others. A developer does not need to know about different transaction types when retrieving them, this is ."
    },
    "testCustomers" : {
      "type" : "object",
      "properties" : {
        "SSN" : {
          "type" : "string",
          "description" : "The SSN of a test customer",
          "example" : "29105573083"
        }
      }
    },
    "tokenInfo" : {
      "type" : "object",
      "required" : [ "customerPublidId", "jwtToken" ],
      "properties" : {
        "customerPublidId" : {
          "type" : "string",
          "description" : "The SSN of the customer in question.\n\nTODO: Replace ```customerPublidId```with ```ssn```."
        },
        "jwtToken" : {
          "type" : "string",
          "description" : "Your token."
        }
      },
      "description" : "A token representing the end-consumer of the API.\n"
    },
    "customer" : {
      "type" : "object",
      "required" : [ "address", "countryTax", "customerId", "customerType", "email", "phone" ],
      "properties" : {
        "customerId" : {
          "type" : "string",
          "description" : "SSN (11 digits) or organization number (9 digits).",
          "minLength" : 9,
          "maxLength" : 11,
          "pattern" : "^\\d{9,11}$",
          "example" : "12345678901"
        },
        "firstName" : {
          "type" : "string",
          "description" : "First name. May be used for the contact person if type is ```PERSON```.",
          "example" : "Bruce"
        },
        "lastName" : {
          "type" : "string",
          "description" : "Surname. May be used for the contact person if type is ```PERSON```.",
          "example" : "Wayne"
        },
        "countryTax" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/countryTax"
          }
        },
        "address" : {
          "$ref" : "#/definitions/address"
        },
        "email" : {
          "type" : "string",
          "description" : "Email address. RFC 5322.",
          "minLength" : 6,
          "pattern" : "^\\A[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@ (?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\z$",
          "example" : "example@example.com"
        },
        "phone" : {
          "type" : "string",
          "description" : "Including \"+\" and international prefix. E.164: https://www.twilio.com/docs/glossary/what-e164 Whitespace and dashes are stripped.",
          "pattern" : "^\\+?[1-9]\\d{1,14}$",
          "example" : "+4791504800"
        },
        "countryOfBirth" : {
          "type" : "string",
          "description" : "ISO 3166-1 alpha-2: https://www.iso.org/standard/63546.html",
          "minLength" : 2,
          "maxLength" : 2,
          "example" : "NO"
        },
        "citizenships" : {
          "type" : "array",
          "description" : "ISO 3166-1 alpha-2: https://www.iso.org/standard/63546.html",
          "items" : {
            "type" : "string",
            "minLength" : 2,
            "maxLength" : 2,
            "example" : "NO"
          }
        },
        "customerType" : {
          "type" : "string",
          "description" : "```PERSON```, ```COMPANY``` are expected values\nFor release 1 PERSON will be hardcoded",
          "default" : "PERSON",
          "enum" : [ "PERSON" ],
          "example" : "PERSON"
        },
        "companyName" : {
          "type" : "string",
          "description" : "Out of scope for release 1\n\nCompany name, if type is ```COMPANY```.",
          "example" : "DNB"
        }
      },
      "description" : "One common ```customer```data object for all kinds of customers. A customer may have one or more ```customerEngagement```s."
    },
    "countryTax" : {
      "type" : "object",
      "properties" : {
        "taxLiabilityCountry" : {
          "type" : "string",
          "description" : "ISO 3166-1 alpha-2: : https://www.iso.org/standard/63546.html",
          "default" : "NO",
          "example" : "NO"
        },
        "taxIdentificationNumber" : {
          "type" : "string",
          "example" : "1234567890"
        }
      }
    },
    "accountInterestDetails" : {
      "type" : "object",
      "required" : [ "accruedInterestAndFeesToDate", "earnedInterestToDate", "feesToDate", "interestRate" ],
      "properties" : {
        "interestRate" : {
          "type" : "number",
          "example" : 2.01
        },
        "earnedInterestToDate" : {
          "type" : "number",
          "example" : 100.01
        },
        "accruedInterestAndFeesToDate" : {
          "type" : "number",
          "example" : 1.01
        },
        "feesToDate" : {
          "type" : "number",
          "example" : 5.01
        },
        "accruedInterestFromLastYear" : {
          "type" : "number",
          "example" : 500.01
        }
      },
      "description" : "Details about an the interest for an ```account```."
    },
    "accountStatement" : {
      "type" : "object",
      "required" : [ "accountNumber", "month", "transactions", "year" ],
      "properties" : {
        "accountNumber" : {
          "type" : "string",
          "minLength" : 11,
          "maxLength" : 11,
          "pattern" : "^\\d{11}$",
          "example" : "12345678901"
        },
        "year" : {
          "type" : "string",
          "description" : "YYYY",
          "example" : "1990"
        },
        "month" : {
          "type" : "string",
          "description" : "MM, January: 01",
          "minLength" : 2,
          "maxLength" : 2,
          "pattern" : "^\\d{2}$",
          "example" : "01"
        },
        "transactions" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/transaction"
          }
        }
      },
      "description" : "Monthly ```account``` statement. "
    },
    "accountDetails" : {
      "type" : "object",
      "required" : [ "BIC", "IBAN", "created", "currency" ],
      "properties" : {
        "IBAN" : {
          "type" : "string",
          "description" : "ISO 13616:2007: https://www.iso.org/standard/41031.html No whitespace. Enjoy the regex.",
          "pattern" : "^((NO)[0-9A-Z]{2}[ ][0-9A-Z]{4}[ ][0-9A-Z]{4}[ ][0-9A-Z]{3}|(NO)[0-9A-Z]{13}|(BE)[0-9A-Z]{2}[ ][0-9A-Z]{4}[ ][0-9A-Z]{4}[ ][0-9A-Z]{4}|(BE)[0-9A-Z]{14}|(DK|FO|FI|GL|NL)[0-9A-Z]{2}[ ][0-9A-Z]{4}[ ][0-9A-Z]{4}[ ][0-9A-Z]{4}[ ][0-9A-Z]{2}|(DK|FO|FI|GL|NL)[0-9A-Z]{16}|(MK|SI)[0-9A-Z]{2}[ ][0-9A-Z]{4}[ ][0-9A-Z]{4}[ ][0-9A-Z]{4}[ ][0-9A-Z]{3}|(MK|SI)[0-9A-Z]{17}|(BA|EE|KZ|LT|LU|AT)[0-9A-Z]{2}[ ][0-9A-Z]{4}[ ][0-9A-Z]{4}[ ][0-9A-Z]{4}[ ][0-9A-Z]{4}|(BA|EE|KZ|LT|LU|AT)[0-9A-Z]{18}|(HR|LI|LV|CH)[0-9A-Z]{2}[ ][0-9A-Z]{4}[ ][0-9A-Z]{4}[ ][0-9A-Z]{4}[ ][0-9A-Z]{4}[ ][0-9A-Z]{1}|(HR|LI|LV|CH)[0-9A-Z]{19}|(BG|DE|IE|ME|RS|GB)[0-9A-Z]{2}[ ][0-9A-Z]{4}[ ][0-9A-Z]{4}[ ][0-9A-Z]{4}[ ][0-9A-Z]{4}[ ][0-9A-Z]{2}|(BG|DE|IE|ME|RS|GB)[0-9A-Z]{20}|(GI|IL)[0-9A-Z]{2}[ ][0-9A-Z]{4}[ ][0-9A-Z]{4}[ ][0-9A-Z]{4}[ ][0-9A-Z]{4}[ ][0-9A-Z]{3}|(GI|IL)[0-9A-Z]{21}|(AD|CZ|SA|RO|SK|ES|SE|TN)[0-9A-Z]{2}[ ][0-9A-Z]{4}[ ][0-9A-Z]{4}[ ][0-9A-Z]{4}[ ][0-9A-Z]{4}[ ][0-9A-Z]{4}|(AD|CZ|SA|RO|SK|ES|SE|TN)[0-9A-Z]{22}|(PT)[0-9A-Z]{2}[ ][0-9A-Z]{4}[ ][0-9A-Z]{4}[ ][0-9A-Z]{4}[ ][0-9A-Z]{4}[ ][0-9A-Z]{4}[ ][0-9A-Z]{1}|(PT)[0-9A-Z]{23}|(IS|TR)[0-9A-Z]{2}[ ][0-9A-Z]{4}[ ][0-9A-Z]{4}[ ][0-9A-Z]{4}[ ][0-9A-Z]{4}[ ][0-9A-Z]{4}[ ][0-9A-Z]{2}|(IS|TR)[0-9A-Z]{24}|(FR|GR|IT|MC|SM)[0-9A-Z]{2}[ ][0-9A-Z]{4}[ ][0-9A-Z]{4}[ ][0-9A-Z]{4}[ ][0-9A-Z]{4}[ ][0-9A-Z]{4}[ ][0-9A-Z]{3}|(FR|GR|IT|MC|SM)[0-9A-Z]{25}|(AL|CY|HU|LB|PL)[0-9A-Z]{2}[ ][0-9A-Z]{4}[ ][0-9A-Z]{4}[ ][0-9A-Z]{4}[ ][0-9A-Z]{4}[ ][0-9A-Z]{4}[ ][0-9A-Z]{4}|(AL|CY|HU|LB|PL)[0-9A-Z]{26}|(MU)[0-9A-Z]{2}[ ][0-9A-Z]{4}[ ][0-9A-Z]{4}[ ][0-9A-Z]{4}[ ][0-9A-Z]{4}[ ][0-9A-Z]{4}[ ][0-9A-Z]{4}[ ][0-9A-Z]{2}|(MU)[0-9A-Z]{28}|(MT)[0-9A-Z]{2}[ ][0-9A-Z]{4}[ ][0-9A-Z]{4}[ ][0-9A-Z]{4}[ ][0-9A-Z]{4}[ ][0-9A-Z]{4}[ ][0-9A-Z]{4}[ ][0-9A-Z]{3}|(MT)[0-9A-Z]{29})$",
          "example" : "NO9386011117947"
        },
        "BIC" : {
          "type" : "string",
          "description" : "ISO 9362: https://en.wikipedia.org/wiki/ISO_9362",
          "pattern" : "^[a-z]{6}[2-9a-z][0-9a-np-z]([a-z0-9]{3}|x{3})?$",
          "example" : "DNBANOKKXXX"
        },
        "currency" : {
          "type" : "string",
          "description" : "Currency: ISO 4217: alpha 3-letter upcase. https://www.iso.org/iso-4217-currency-codes.html",
          "minLength" : 3,
          "maxLength" : 3,
          "pattern" : "^[A-Z]{3}$",
          "example" : "NOK"
        },
        "updated" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Time of last update.",
          "example" : "2018-12-31T23:59:59+01"
        },
        "created" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Time of account creation.",
          "example" : "2018-12-31T23:59:59+01"
        },
        "accountInterestDetails" : {
          "$ref" : "#/definitions/accountInterestDetails"
        }
      },
      "description" : "Details for an ```account```, with optional reference to ```accountDetails```.\n\nIBAN help: http://www.xe.com/ibancalculator/sample/?ibancountry=norway\n\nPossible regex for IBAN:"
    },
    "account" : {
      "type" : "object",
      "required" : [ "accountCurrency", "accountNumber", "accountOwnerName", "productName", "type" ],
      "properties" : {
        "accountNumber" : {
          "type" : "string",
          "description" : "11 digits. Bank, etc can be determined from this: https://no.wikipedia.org/wiki/Kontonummer",
          "minLength" : 11,
          "maxLength" : 11,
          "pattern" : "^\\d{11}$",
          "example" : "12345678901"
        },
        "productName" : {
          "type" : "string"
        },
        "type" : {
          "type" : "string",
          "description" : "Any type (category) of account.",
          "default" : "DEPOSIT",
          "enum" : [ "DEPOSIT", "CREDITCARD", "ASK", "BSU" ],
          "example" : "DEPOSIT"
        },
        "accountName" : {
          "type" : "string",
          "description" : "Friendly name for the account:",
          "example" : "Standard account"
        },
        "accountOwnerName" : {
          "type" : "string",
          "example" : "Rahaman, Tuhina"
        },
        "accountCurrency" : {
          "type" : "string",
          "example" : "NOK"
        }
      },
      "description" : "Same ```account``` data object is used for all types of accounts. The ```type``` property determines the type. \n\nAn ```account``` may have ```accountDetails```, which may again have ```accountBalance``` and  ```accountInterestDetails```. \n\n**Format**\n\nA Norwegian ```account```has three groups: xxxx yy zzzzc. Excample: 8601 11 17947.\n\n* xxxx: Bank register number, identifying bank and branch. \n* yy: Account group. \n* zzzz: Customer account number.  \n* c: Control digit, modulo 11 with weight number 5432765432.\n\nMore details: https://www.ecbs.org/iban/norway-bank-account-number.html\n\n**INFO: Available data from Shared Service Layer:**\n\n```\n{\n\t\"accountNumber\": \"05390000000\",\n\t\"accountCategory\": \"\",\n\t\"productName\": \"\",\n\t\"accountAlias\": \"\",\n\t\"accountCurrency\": \"NOK\",\n\t\"accountOwnerId\": \"FX040827979925254X\",\n\t\"accountOwnerPublicId\": \"02116731128\",\n\t\"countryOfAccountOwnerPublicId\": \"NO\",\n\t\"accountOwnerName\": \"Nils Nilsen\",\n\t\"paymentFromAllowed\": true,\n\t\"transferFromAllowed\": true,\n\t\"transferToAllowed\": true,\n\t\"withdrawalAllowed\": true,\n\t\"standingOrderExists\": true,\n\t\"inDefaultStatus\": true,\n\t\"debetCardExists\": true\n}\n```"
    },
    "balance" : {
      "type" : "object",
      "required" : [ "balance", "currency" ],
      "properties" : {
        "balance" : {
          "type" : "number",
          "description" : "Current balance. Does not take into account due payments, and is not a \"safe to spend\" amount.",
          "example" : 90000.01
        },
        "lastBalanceChange" : {
          "type" : "string",
          "format" : "date-time",
          "example" : "2018-12-31T23:59:59+01:00"
        },
        "currency" : {
          "type" : "string",
          "description" : "ISO 4217: alpha 3-letter upcase: https://www.iso.org/iso-4217-currency-codes.html",
          "default" : "NOK",
          "minLength" : 3,
          "maxLength" : 3,
          "pattern" : "`^[A-Z]{3}$",
          "example" : "NOK"
        },
        "creditLimit" : {
          "type" : "integer",
          "minimum" : 0,
          "example" : "100000.00"
        }
      },
      "description" : "Common data object used by both ```account```and  ```card```. \n\nNot all fields from Shared Service Layer is used, since ```balance```wil be part of an ```account```or a ```card```, and information from parent data object is implicit. Some values offered by the Shared Service Layer may easily be calculated, such as: availableBalanceWithCredit = bookedBalance + creditLimit. \n\nExample:\n```\n{\n  \"currency\": \"NOK\",\n  \"creditLimit\": 100000.00,\n  \"balance\": 90000.01,\n  \"lastBalanceChange\": \"2018-12-31T23:59:59+01:00\"\n}\n```\n\nOffered by the Shared Service Layer:\n```\n{\n  \"accountNumber\": \"05390000000\",\n  \"currency\": \"NOK\",\n  \"availableBalanceWithCredit\": 1000.00,\n  \"availableBalanceWithoutCredit\": 500.00,\n  \"bookedBalance\": 500.00,\n  \"creditLimit\": 500.00,\n  \"lastBalanceChange\": \"2016-02-28 16:41:41\"\n  \"reservedAmount\": 500.00,\n  \"instalmentAmount\": 500.00,\n  \"usedAmount\": 500.00\n}\n```"
    },
    "paymentInitiation" : {
      "type" : "object",
      "required" : [ "amount", "creditAccountNumber", "debitAccountNumber", "initiator", "paymentDate", "type" ],
      "properties" : {
        "type" : {
          "type" : "string",
          "description" : "KID, message or transfer",
          "default" : "KID",
          "enum" : [ "KID", "MESSAGE", "TRANSFER" ],
          "example" : "KID"
        },
        "debitAccountNumber" : {
          "type" : "string",
          "description" : "The account to send money.",
          "minLength" : 11,
          "maxLength" : 11,
          "pattern" : "^\\d{11}$",
          "example" : "12345678901"
        },
        "creditAccountNumber" : {
          "type" : "string",
          "description" : "The account to receive money.",
          "minLength" : 11,
          "maxLength" : 11,
          "pattern" : "^\\d{11}$",
          "example" : "12345678901"
        },
        "amount" : {
          "type" : "number",
          "example" : 1500.01
        },
        "paymentDate" : {
          "type" : "string",
          "format" : "date-time",
          "example" : "2018-12-31T23:59:59+01:00"
        },
        "message" : {
          "type" : "string",
          "description" : "Used for both KID and Message, based on Type.",
          "example" : "35298562958265982749"
        },
        "initiator" : {
          "type" : "string",
          "description" : "Nu phone who dis?",
          "example" : "DNB"
        }
      },
      "description" : "The payment initiation object can be used for three types of payments, which should be specified in the ```type``` property:\n* ```KID```: The customer identification number specified by the recieving end, often described in the invioce. \n* ```MESSAGE```: A payment just having a text message attached with it.\n* ```TRANSFER```: A payment going between two DNB accounts having the same owner. \n\nNot including the \"straksbetaling\" (imediate payment) flag, as this will be the default.\n\nPayment initiator: Part of the context object, but kept here too for reference. "
    },
    "paymentDetails" : {
      "type" : "object",
      "properties" : {
        "invoiceReference" : {
          "type" : "string",
          "description" : "Used for eFaktura",
          "example" : "12345678901"
        }
      },
      "description" : "More details about a payment. Some payment types have more data than others."
    },
    "payment" : {
      "type" : "object",
      "required" : [ "amount", "creditAccount", "debitAccount", "paymentId" ],
      "properties" : {
        "paymentId" : {
          "type" : "string",
          "example" : "123456789"
        },
        "debitAccount" : {
          "type" : "string",
          "minLength" : 11,
          "maxLength" : 11,
          "pattern" : "^\\d{11}$",
          "example" : "12345678901"
        },
        "creditAccount" : {
          "type" : "string",
          "minLength" : 11,
          "maxLength" : 11,
          "pattern" : "^\\d{11}$",
          "example" : "12345678901"
        },
        "amount" : {
          "type" : "number",
          "example" : 1500.01
        },
        "type" : {
          "type" : "string",
          "description" : "TBD",
          "example" : "TBD1"
        },
        "date" : {
          "type" : "string",
          "format" : "date",
          "example" : "2018-31-12"
        },
        "paymentDetails" : {
          "$ref" : "#/definitions/paymentDetails"
        }
      },
      "description" : "**NOTE:** May be completely merged with ```transaction```.\n\nA ```payment``` is a planned payment/transaction that has not yet been carried out.\n\nTODO: There is no ```message```or ```kid```, as in ```paymentInitiation```and ```transaction```. Check this.\n\nDetails about a payment. Used by:\n* /payments/due/{accountNumber}: Returning a list of payments, with _empty_ PaymentDetails\n* /payments/due/{accountNumber}/details: Returning a list of payments, with PaymentDetails\n\n"
    },
    "currencyRate" : {
      "type" : "object",
      "required" : [ "buyRateTransfer", "currency", "unit" ],
      "properties" : {
        "currency" : {
          "type" : "string",
          "description" : "ISO 4217: alpha 3-letter upcase: https://www.iso.org/iso-4217-currency-codes.html",
          "default" : "NOK",
          "minLength" : 3,
          "maxLength" : 3,
          "example" : "NOK"
        },
        "unit" : {
          "type" : "string",
          "description" : "1 or 100?",
          "example" : "1"
        },
        "buyRateTransfer" : {
          "type" : "number",
          "description" : "Rate for buying this currency (transfer/cheque)",
          "example" : 123.45
        },
        "sellRateTransfer" : {
          "type" : "number",
          "description" : "Rate for selling this currency (transfer/cheque).",
          "example" : 123.45
        },
        "midRate" : {
          "type" : "number",
          "description" : "Middle rate for this currency (transfer/cheque).",
          "example" : 123.45
        },
        "changeInRate" : {
          "type" : "number",
          "description" : "Not implemented."
        },
        "prevoiusRateTransfer" : {
          "type" : "number",
          "description" : "Not implemented."
        },
        "buyRateCash" : {
          "type" : "number",
          "description" : "Rate for buying this currency (cash)",
          "example" : 123.45
        },
        "sellRateCash" : {
          "type" : "number",
          "description" : "Rate for selling this currency (cash).",
          "example" : 123.45
        }
      },
      "description" : "Response structure for different exchange rates based on base currency.\n"
    },
    "openingTimes" : {
      "type" : "array",
      "description" : "Opening times for a ```branch```, ```ATM```, or something else.\n\nIf open 24 hours, ```openingTime``` is \"00:00\" and ```closingTime``` is \"24:00\". ",
      "items" : {
        "required" : [ "closingTime", "openingTime" ],
        "type" : "object",
        "properties" : {
          "day" : {
            "type" : "integer",
            "description" : "1: Monday, 2: Tuesday, etc",
            "minimum" : 1,
            "maximum" : 7,
            "example" : 1
          },
          "openingTime" : {
            "type" : "string",
            "description" : "HH:MM",
            "pattern" : "^\\d{2}:\\d{2}$",
            "example" : "09:00"
          },
          "closingTime" : {
            "type" : "string",
            "description" : "HH:MM",
            "pattern" : "^\\d{2}:\\d{2}$",
            "example" : "16:00"
          }
        }
      }
    },
    "address" : {
      "type" : "object",
      "required" : [ "postCode", "postalAddressCountry", "postalCodeName" ],
      "properties" : {
        "AddressLine1" : {
          "type" : "string",
          "description" : "Street name and number",
          "example" : "1007 Mountain Drive"
        },
        "AddressLine2" : {
          "type" : "string"
        },
        "AddressLine3" : {
          "type" : "string"
        },
        "postalCodeName" : {
          "type" : "string",
          "example" : "Gotham"
        },
        "postCode" : {
          "type" : "string",
          "description" : "Norwegian postcode only (for now).",
          "minLength" : 4,
          "maxLength" : 4,
          "pattern" : "^\\d{4}$",
          "example" : "011111"
        },
        "postalAddressCountry" : {
          "type" : "string",
          "description" : "ISO 3166-1 alpha-2: https://www.iso.org/standard/63546.html",
          "minLength" : 2,
          "maxLength" : 2,
          "example" : "US"
        }
      },
      "description" : "Corresponds with address fields used internally in DNB. \n\n```\n(Name from parent object)\nDronning Eufemias gate 30\nc/o CEO office\n0191 Oslo\nNO\n```"
    },
    "location" : {
      "type" : "object",
      "required" : [ "id", "latitude", "longditude" ],
      "properties" : {
        "id" : {
          "type" : "string",
          "description" : "Internal id",
          "example" : "12345"
        },
        "friendlyName" : {
          "type" : "string",
          "description" : "Descriptive name",
          "example" : "DNB headquarters"
        },
        "latitude" : {
          "type" : "string",
          "pattern" : "^[-+]?([1-8]?\\d(\\.\\d+)?|90(\\.0+)?),\\s*[-+]?(180(\\.0+)?|((1[0-7]\\d)|([1-9]?\\d))(\\.\\d+)?)$",
          "example" : "59.9075823"
        },
        "longditude" : {
          "type" : "string",
          "pattern" : "^[-+]?([1-8]?\\d(\\.\\d+)?|90(\\.0+)?),\\s*[-+]?(180(\\.0+)?|((1[0-7]\\d)|([1-9]?\\d))(\\.\\d+)?)$",
          "example" : "10.760133399999972"
        },
        "description" : {
          "type" : "string",
          "description" : "May be used for large areas like airports, train stations, stadiums, etc.",
          "example" : "Lobby"
        }
      },
      "description" : "Data object for physical location based on GPS coordinates. May be used for something that does not have a specific address, or somethjing that needs a more specific than an address provides, such as an ```ATM``` at a train station. A ```location``` may be used in addition to an ```address```.\n"
    },
    "branch" : {
      "type" : "object",
      "required" : [ "id", "name", "openingTimes" ],
      "properties" : {
        "id" : {
          "type" : "string",
          "description" : "SSL: storeCode"
        },
        "name" : {
          "type" : "string"
        },
        "categories" : {
          "type" : "string",
          "enum" : [ "BRANCH", "ATM" ]
        },
        "description" : {
          "required" : [ "norwegian" ],
          "type" : "object",
          "properties" : {
            "norwegian" : {
              "type" : "string"
            },
            "english" : {
              "type" : "string"
            }
          }
        },
        "address" : {
          "$ref" : "#/definitions/address"
        },
        "latitude" : {
          "type" : "string",
          "example" : "59.9075823"
        },
        "longitude" : {
          "type" : "string",
          "example" : "10.760133399999972"
        },
        "phone" : {
          "type" : "string"
        },
        "website" : {
          "type" : "string"
        },
        "openingTimes" : {
          "$ref" : "#/definitions/openingTimes"
        },
        "openingTimesSummer" : {
          "$ref" : "#/definitions/openingTimes"
        },
        "openingHoliday" : {
          "$ref" : "#/definitions/openingTimes"
        },
        "currencies" : {
          "type" : "array",
          "description" : "Array of ISO 4217: alpha 3-letter upcase. https://www.iso.org/iso-4217-currency-codes.html",
          "items" : {
            "type" : "string",
            "example" : "NOK"
          }
        },
        "openingTimeSummertime" : {
          "$ref" : "#/definitions/openingTimes"
        },
        "summertimeStart" : {
          "type" : "string",
          "format" : "date"
        },
        "summertimeStop" : {
          "type" : "string",
          "format" : "date"
        }
      },
      "description" : "All data about a branch.\n\n\n   \n"
    },
    "atm" : {
      "type" : "object",
      "required" : [ "id", "name", "openingTimes" ],
      "properties" : {
        "id" : {
          "type" : "string",
          "description" : "SSL: storeCode"
        },
        "name" : {
          "type" : "string"
        },
        "categories" : {
          "type" : "string",
          "enum" : [ "BRANCH", "ATM" ]
        },
        "description" : {
          "required" : [ "norwegian" ],
          "type" : "object",
          "properties" : {
            "norwegian" : {
              "type" : "string"
            },
            "english" : {
              "type" : "string"
            }
          }
        },
        "address" : {
          "$ref" : "#/definitions/address"
        },
        "latitude" : {
          "type" : "string",
          "example" : "59.9075823"
        },
        "longitude" : {
          "type" : "string",
          "example" : "10.760133399999972"
        },
        "phone" : {
          "type" : "string"
        },
        "website" : {
          "type" : "string"
        },
        "openingTimes" : {
          "$ref" : "#/definitions/openingTimes"
        },
        "openingTimesSummer" : {
          "$ref" : "#/definitions/openingTimes"
        },
        "openingHoliday" : {
          "$ref" : "#/definitions/openingTimes"
        },
        "currencies" : {
          "type" : "array",
          "description" : "Array of ISO 4217: alpha 3-letter upcase. https://www.iso.org/iso-4217-currency-codes.html",
          "items" : {
            "type" : "string",
            "example" : "NOK"
          }
        },
        "openingTimeSummertime" : {
          "$ref" : "#/definitions/openingTimes"
        },
        "summertimeStart" : {
          "type" : "string",
          "format" : "date"
        },
        "summertimeStop" : {
          "type" : "string",
          "format" : "date"
        }
      },
      "description" : "All data for an ATM.\n"
    }
  }
}